# Generated by Django 4.1.5 on 2023-03-18 15:52

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='BrokerM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CargoM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ClearearM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ClearerRateM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('derivative', models.CharField(max_length=1000)),
                ('clearer_house_fee', models.CharField(max_length=2000)),
                ('clearer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.clearearm')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyInvestmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Customer_Company_name', models.CharField(max_length=100)),
                ('Customer_Account', models.CharField(max_length=100)),
                ('Customer_Transfer_Type', models.CharField(choices=[('Credit', 'Credit'), ('Debit', 'Debit')], max_length=100)),
                ('Transfer_Amount', models.FloatField()),
                ('Cash_Factor', models.FloatField(null=True)),
                ('Email', models.EmailField(max_length=254)),
                ('Remarks', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContractM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('derivative', models.CharField(max_length=100, null=True)),
                ('single_dif', models.CharField(max_length=100, null=True)),
                ('major_mini', models.CharField(max_length=100, null=True)),
                ('contract_name', models.TextField(null=True)),
                ('contract1', models.TextField(null=True)),
                ('contract2', models.TextField(null=True)),
                ('major_mini_conn', models.TextField(null=True)),
                ('unit', models.TextField(null=True)),
                ('tick', models.TextField(null=True)),
                ('holiday', models.TextField(null=True)),
                ('bbi_mt_conversion', models.TextField(null=True)),
                ('f_w_months', models.TextField(null=True)),
                ('exchange_fee', models.TextField(null=True)),
                ('exchanging_clearing_fee', models.TextField(null=True)),
                ('block_fee', models.TextField(null=True)),
                ('screen_fee', models.TextField(null=True)),
                ('gmifc_code', models.TextField(null=True)),
                ('physical_code', models.TextField(null=True)),
                ('logical_code', models.TextField(null=True)),
                ('symbol_code', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CounterpartyM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('company_name', models.CharField(max_length=1000)),
                ('trader_license_number', models.CharField(max_length=2000)),
                ('email', models.CharField(max_length=10000)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='DerivativeM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='FutureLTD',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Contract_symbol', models.DateField(blank=True, null=True)),
                ('Ls_gas_oil', models.DateField(blank=True, null=True)),
                ('Brent_crude_futures', models.DateField(blank=True, null=True)),
                ('RBOB_Gasoline_futures', models.DateField(blank=True, null=True)),
                ('Heating_oil_futures', models.DateField(blank=True, null=True)),
                ('WTI_crude_futures', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HolidayM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('date', models.DateField()),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PortM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TankNumberM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TankTypeM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TerminalM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Traders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Unit1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TestBlotter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.book')),
                ('Contract_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.contractm')),
            ],
        ),
        migrations.CreateModel(
            name='TankCapacityM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('product_status', models.CharField(blank=True, max_length=100, null=True)),
                ('Density', models.FloatField()),
                ('Nominal_capacity', models.FloatField()),
                ('Safe_fill_capacity', models.FloatField()),
                ('Prevailing_GOV', models.FloatField()),
                ('start_date', models.DateField(default=datetime.datetime.now)),
                ('end_date', models.DateField(default=datetime.datetime.now)),
                ('Cost', models.FloatField()),
                ('Remarks', models.CharField(blank=True, max_length=100, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('Port', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.portm')),
                ('Tank_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.tanknumberm')),
                ('Tank_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.tanktypem')),
                ('Terminal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.terminalm')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SwapBlotterModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.CharField(max_length=100)),
                ('trader_type', models.CharField(max_length=1000, null=True)),
                ('book', models.CharField(max_length=1000, null=True)),
                ('customer_company', models.CharField(max_length=10000, null=True)),
                ('customer_account', models.CharField(max_length=10000, null=True)),
                ('derivatives', models.CharField(max_length=1000, null=True)),
                ('contract', models.CharField(max_length=100, null=True)),
                ('volume', models.CharField(max_length=1000, null=True)),
                ('start_date', models.CharField(max_length=100, null=True)),
                ('end_date', models.CharField(max_length=100, null=True)),
                ('price', models.CharField(max_length=100, null=True)),
                ('approx_ep', models.CharField(max_length=100, null=True)),
                ('holiday', models.CharField(max_length=1000, null=True)),
                ('type', models.CharField(max_length=1000, null=True)),
                ('broker', models.CharField(max_length=1000, null=True)),
                ('efs_code', models.CharField(max_length=100, null=True)),
                ('tick', models.CharField(max_length=2000, null=True)),
                ('singl_dif', models.CharField(max_length=2000, null=True)),
                ('mini_major', models.CharField(max_length=2000, null=True)),
                ('mini_major_connection', models.CharField(max_length=2000, null=True)),
                ('bbi_mt_conversion', models.CharField(max_length=2000, null=True)),
                ('total_days', models.CharField(max_length=2000, null=True)),
                ('priced_days', models.CharField(max_length=2000, null=True)),
                ('unpriced_days', models.CharField(max_length=2000, null=True)),
                ('total_volume', models.CharField(max_length=2000, null=True)),
                ('priced_volume', models.CharField(max_length=2000, null=True)),
                ('block_fee', models.CharField(max_length=2000, null=True)),
                ('screen_fee', models.CharField(max_length=2000, null=True)),
                ('brockerage', models.CharField(max_length=2000, null=True)),
                ('total_fee', models.CharField(max_length=2000, null=True)),
                ('bbi_mt', models.CharField(max_length=2000, null=True)),
                ('kbbi_mt', models.CharField(max_length=2000, null=True)),
                ('unpriced_kbbl_mt', models.CharField(max_length=2000, null=True)),
                ('notes', models.CharField(blank=True, max_length=250, null=True)),
                ('clearer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.clearerratem')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.strategy')),
                ('trader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.traders')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.unit1')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenerateTradeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Trade_id', models.CharField(max_length=10000, unique=True)),
                ('Quantity', models.IntegerField()),
                ('Status', models.CharField(blank=True, default='new', max_length=100, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('Book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.book')),
                ('Cargo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.cargom')),
                ('Company_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.counterpartym')),
                ('Strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.strategy')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='FuturesBlottersModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Date', models.DateField(default=datetime.datetime.now)),
                ('Trade_Type', models.CharField(choices=[('External ', 'External'), ('Bilateral', 'Bilateral')], max_length=100)),
                ('Buy_Sell', models.CharField(max_length=100, null=True)),
                ('Volume', models.FloatField(blank=True, null=True)),
                ('Contract_Month', models.DateField(default=datetime.datetime.now)),
                ('Price', models.FloatField(blank=True, null=True)),
                ('Approximate_EP', models.FloatField(blank=True, null=True)),
                ('EFS_Code', models.IntegerField(blank=True, null=True)),
                ('Unit', models.CharField(blank=True, max_length=100, null=True)),
                ('Clearer_rate', models.FloatField(blank=True, null=True)),
                ('Exchange_rate', models.FloatField(blank=True, null=True)),
                ('Brokerage', models.FloatField(blank=True, null=True)),
                ('Total_Fee', models.FloatField(blank=True, null=True)),
                ('Holiday', models.CharField(blank=True, max_length=100, null=True)),
                ('bbl_mt_conversion', models.FloatField(blank=True, null=True)),
                ('kbbl_mt_conversion', models.FloatField(blank=True, null=True)),
                ('Notes', models.CharField(blank=True, max_length=250, null=True)),
                ('Account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Account_from_companyinvestment', to='backend.companyinvestmentmodel')),
                ('Book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.book')),
                ('Broker', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.brokerm')),
                ('Clearer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.clearerratem')),
                ('Contract_Name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fb_contractname', to='backend.contractm')),
                ('Customer_Company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Compnay_name_from_company_investment', to='backend.companyinvestmentmodel')),
                ('Strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.strategy')),
                ('Trader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.traders')),
                ('Type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.type')),
            ],
        ),
        migrations.AddField(
            model_name='clearerratem',
            name='contract',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.contractm'),
        ),
        migrations.CreateModel(
            name='BrockerageM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('apply_mode', models.CharField(max_length=200)),
                ('brockerage', models.CharField(max_length=100)),
                ('brocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.brokerm')),
                ('contract_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.contractm')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[(0, 'admin'), (1, 'user')], default=0, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
